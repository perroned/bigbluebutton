<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:mate="http://mate.asfusion.com/"
		 xmlns:views="org.bigbluebutton.modules.videoconf.views.*"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 initialize="init()"
		 creationComplete="onCreationComplete()"
		 backgroundColor="white"
		 width="320"
		 height="240"
		 mouseOver="onCanvasMouseOver()"
		 mouseOut="onCanvasMouseOut()">

	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.lib.common.views.VideoView;
			import org.bigbluebutton.lib.user.models.User;
			
			[Bindable]
			private var _rolledOverMuteBtn:Boolean = false;
			
			[Bindable]
			private var _rolledOverCanvas:Boolean = false;
			
			[Bindable]
			private var _username:String = "";
			
			[Bindable]
			private var _webcam:VideoView = null;
			
			[Bindable]
			private var _me:Boolean = false;
			
			private var _moderator:Boolean = false;
			
			private var _user:User = null;
			
			private var _streamName:String = null;
			
			private var _hideMuteBtnTimer:Timer;
			
			private var _imageLoader:Loader = new Loader();
			
			protected function init():void {
				_hideMuteBtnTimer = new Timer(500, 1);
				_hideMuteBtnTimer.addEventListener(TimerEvent.TIMER, onHideMuteBtnTimerComplete);
			}
			
			protected function onCreationComplete():void {
			}
			
			private function loadedImage(event:Event):void {
				avatar.source = event.target.content;
			}
			
			public function addAvatar(user:User, url:String):void {
				_imageLoader.load(new URLRequest(url));
				_imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loadedImage);
				
				avatarVisibility = true;
				setUserProperties(user);
			}
			
			public function get imageLoader():Loader {
				return _imageLoader;
			}
			
			public function setUserProperties(user:User):void {
				_user = user;
				_username = user.name;
				_me = user.me;
				
				updateButtons();
				updateTalkingStatus();
			}
			
			public function get user():User {
				return _user;
			}
			
			public function get streamName():String {
				return _streamName;
			}
			
			public function set streamName(value:String):void {
				_streamName = value;
			}
			
			public function shutdown():void {
				trace("[UserGraphicHolder:shutdown]");
				dispatchEvent(new Event("close"));
			}
			
			private function set avatarVisibility(value:Boolean):void {
				avatar.visible = avatar.includeInLayout = value;
				video.visible = video.includeInLayout = !value;
			}
			
			public function resize(itemWidth:Number, itemHeight:Number):void {
				if (avatar.visible) {
					avatar.width = itemWidth;
					avatar.height = itemHeight;
					
				} else if (webcam && webcam.videoViewVideo) {
					webcam.videoViewVideo.width = itemWidth;
					
					webcam.videoViewVideo.height = itemHeight;
				}
			}
			
			private function set videoVisibility(value:Boolean):void {
				avatarVisibility = !value;
			}
			
			private function hasPermissionToMute():Boolean {
				return (_me || _moderator);
			}
			
			
			private function onMuteBtnClick(event:MouseEvent):void {
				if (user && user.voiceJoined && hasPermissionToMute()) {
					dispatchEvent(new Event("muteUser"));
				}
				event.stopPropagation();
			}
			
			private function onMuteBtnMouseOver():void {
				if (hasPermissionToMute()) {
					_rolledOverMuteBtn = true;
				}
				updateButtons();
			}
			
			private function onMuteBtnMouseOut():void {
				if (hasPermissionToMute()) {
					_rolledOverMuteBtn = false;
				}
				updateButtons();
			}
			
			private function onCanvasMouseOver():void {
				_rolledOverCanvas = true;
				updateButtons();
			}
			
			private function onCanvasMouseOut():void {
				_rolledOverCanvas = false;
				updateButtons();
			}
			
			private function updateButtons():void {
				if (user != null) {
					if (_rolledOverMuteBtn == user.muted) {
						muteBtn.styleName = "muteOverlayBtn";
					} else {
						muteBtn.styleName = "unmuteOverlayBtn";
					}
					if (_rolledOverCanvas || _rolledOverMuteBtn) {
						setMuteBtnVisibility(user.voiceJoined);
					} else {
						setMuteBtnVisibility(user.voiceJoined && user.muted);
					}
					
					var userIconVisibility:Boolean;
					if (user.presenter) {
						userIcon.source = "assets/images/presenter_white.png";
						userIconVisibility = true;
					} else {
						if (user.role == User.MODERATOR) {
							userIcon.source = "assets/images/moderator_white.png";
							userIconVisibility = true;
						} else {
							userIconVisibility = false;
						}
					}
					userIconWrapper.visible = userIconWrapper.includeInLayout = userIconVisibility;
				}
			}
			
			public function updateTalkingStatus():void {
				if (user.talking) {
					titleBox.setStyle("styleName", "videoToolbarBackgroundTalkingStyle");
				} else {
					titleBox.setStyle("styleName", "videoToolbarBackgroundNotTalkingStyle");
				}
			}
			
			private function handleUserTalkingEvent(userID:String):void {
				if (userID == user.userID) {
					updateButtons();
					updateTalkingStatus();
				}
			}
			
			private function onHideMuteBtnTimerComplete(event:TimerEvent):void {
				muteBtnWrapper.visible = false;
			}
			
			private function setMuteBtnVisibility(visible:Boolean):void {
				if (visible) {
					showMuteBtn();
				} else {
					hideMuteBtn();
				}
			}
			
			private function hideMuteBtn():void {
				_hideMuteBtnTimer.reset();
				_hideMuteBtnTimer.start();
			}
			
			private function showMuteBtn():void {
				_hideMuteBtnTimer.reset();
				muteBtnWrapper.visible = true;
			}
			
			public function addVideo(user:User, webcam:VideoView):void {
				_webcam = webcam;
				video.addChild(_webcam.videoViewVideo);
				setUserProperties(user);
			}
			
			public function get aspectRatio():Number {
				if (avatar.source) {
					return avatar.source.width / avatar.source.height;
				} else {
					return 320 / 240;
				}
			}
			
			public function get username():String {
				return _username;
			}
			
			public function get webcam():VideoView {
				return _webcam;
			}
			
			public function set moderator(value:Boolean):void {
				_moderator = value;
			
			}
		]]>
	</mx:Script>

	<mx:Fade id="fadeOut"
			 duration="200"
			 alphaFrom="1.0"
			 alphaTo="0.0" />
	<mx:Fade id="fadeIn"
			 duration="200"
			 alphaFrom="0.0"
			 alphaTo="1.0" />

	<mx:Canvas id="canvas"
			   width="100%"
			   height="100%"
			   horizontalScrollPolicy="off"
			   verticalScrollPolicy="off">
		<mx:Image id="avatar"
				  width="100%"
				  height="100%"
				  visible="false"
				  includeInLayout="false" />
		<s:VideoDisplay id="video"
						width="100%"
						height="100%" />

		<mx:VBox id="overlay"
				 width="100%"
				 height="100%">
			<mx:HBox id="titleBox"
					 width="100%"
					 verticalAlign="middle"
					 paddingRight="0"
					 paddingLeft="0"
					 styleName="videoToolbarBackgroundNotTalkingStyle">
				<mx:Box id="userIconWrapper"
						visible="false"
						includeInLayout="false"
						paddingLeft="3"
						paddingRight="0">
					<mx:Image id="userIcon"
							  height="100%" />
				</mx:Box>
				<mx:Label text="{_username + (_me? ' (you)' : '')}"
						  fontWeight="{_me ? 'bold' : 'normal'}"
						  width="100%"
						  paddingLeft="0"
						  minWidth="0"
						  truncateToFit="true"
						  styleName="videoToolbarLabelStyle" />
				<mx:Box paddingRight="5">
					<mx:Button styleName="closeBtnFocus"
							   buttonMode="true"
							   click="shutdown()" />
				</mx:Box>
			</mx:HBox>
			<mx:Box width="100%"
					paddingTop="15"
					paddingRight="15"
					horizontalAlign="right">
				<mx:Box id="muteBtnWrapper"
						visible="false"
						hideEffect="{fadeOut}"
						showEffect="{fadeIn}">
					<mx:Button id="muteBtn"
							   styleName="talkingOverlayBtn"
							   buttonMode="true"
							   click="onMuteBtnClick(event)"
							   mouseOver="onMuteBtnMouseOver()"
							   mouseOut="onMuteBtnMouseOut()" />
				</mx:Box>
			</mx:Box>
		</mx:VBox>
	</mx:Canvas>
</mx:VBox>
