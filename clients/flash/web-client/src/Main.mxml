<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:window="org.bigbluebutton.web.window.views.*"
			   xmlns:main="org.bigbluebutton.web.main.views.*"
			   width="100%"
			   height="100%"
			   preinitialize="preinitializeHandler(event)"
			   creationComplete="creationCompleteHandler(event)"
			   xmlns:views="org.bigbluebutton.web.main.views.*"
			   xmlns:toolbar="org.bigbluebutton.web.toolbar.*"
			   xmlns:cameradisplaysettings="org.bigbluebutton.web.toolbar.webcambutton.cameradisplaysettings.*"
			   xmlns:languageselector="org.bigbluebutton.web.main.views.languageselector.*">
	<fx:Style source="Default.css" />

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import com.adobe.utils.LocaleUtil;
			
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			import org.bigbluebutton.lib.whiteboard.views.WhiteboardConfig;
			import org.bigbluebutton.web.AppConfig;
			import org.bigbluebutton.web.chat.ChatConfig;
			import org.bigbluebutton.web.chat.views.ChatWindow;
			import org.bigbluebutton.web.deskshare.views.DeskshareConfig;
			import org.bigbluebutton.web.deskshare.views.DeskshareWindow;
			import org.bigbluebutton.web.main.MainConfig;
			import org.bigbluebutton.web.main.views.LoadingScreen;
			import org.bigbluebutton.web.presentation.views.PresentationConfig;
			import org.bigbluebutton.web.presentation.views.PresentationWindow;
			import org.bigbluebutton.web.shortcuthelp.ShortcutHelpConfig;
			import org.bigbluebutton.web.toolbar.MainToolbarConfig;
			import org.bigbluebutton.web.toolbar.micbutton.audioselectionwindow.AudioSelectionWindowConfig;
			import org.bigbluebutton.web.toolbar.micbutton.toolbarbutton.ToolbarButtonConfig;
			import org.bigbluebutton.web.toolbar.webcambutton.ChromeWebcamPermissionImage;
			import org.bigbluebutton.web.toolbar.webcambutton.cameradisplaysettings.CameraDisplaySettings;
			import org.bigbluebutton.web.toolbar.webcambutton.cameradisplaysettings.CameraDisplaySettingsConfig;
			import org.bigbluebutton.web.toolbar.webcambutton.toolbarpopupbutton.ToolbarPopupButtonConfig;
			import org.bigbluebutton.web.user.UserConfig;
			import org.bigbluebutton.web.user.views.UserWindow;
			import org.bigbluebutton.web.util.i18n.ResourceUtil;
			import org.bigbluebutton.web.video.VideoConfig;
			import org.bigbluebutton.web.video.views.VideoWindow;
			
			import robotlegs.bender.bundles.mvcs.MVCSBundle;
			import robotlegs.bender.extensions.contextView.ContextView;
			import robotlegs.bender.extensions.mediatorMap.api.IMediator;
			import robotlegs.bender.extensions.mediatorMap.api.IMediatorMap;
			import robotlegs.bender.extensions.signalCommandMap.SignalCommandMapExtension;
			import robotlegs.bender.extensions.viewManager.api.IViewManager;
			import robotlegs.bender.framework.api.IContext;
			import robotlegs.bender.framework.api.LogLevel;
			import robotlegs.bender.framework.impl.Context;
			
			protected var context:IContext;
			
			private var chromeBrowser:ChromeWebcamPermissionImage = null;
			
			[Bindable]
			private var showToolbarOpt:Boolean = true;
			
			[Bindable]
			private var toolbarHeight:Number = 32;
			
			[Bindable]
			private var toolbarPaddingTop:Number = 4;
			
			[Bindable]
			private var showFooterOpt:Boolean = true;
			
			[Bindable]
			private var _showFooter:Boolean = true;
			
			[Bindable]
			private var footerHeight:Number = 24;
			
			[Bindable]
			private var isTunneling:Boolean = false;
			
			[Bindable]
			private var baseIndex:int;
			
			[Bindable]
			private var copyrightText:String;
			
			protected function preinitializeHandler(event:FlexEvent):void {
				setupContext();
				ResourceManager.getInstance().localeChain = ['en_US'];
			}
			
			private function updateCopyrightText():void {
				//if (BBB.initConfigManager().config.branding.copyright == undefined) {
				copyrightText = ResourceUtil.getInstance().getString('bbb.mainshell.copyrightLabel2', ['']); //[appversion]
				//} else {
				//copyrightText = String(BBB.initConfigManager().config.branding.copyright).replace("{0}", appVersion);
				// }
			} //
			
			/**
			 * Sets up the Robotlegs context.
			 */
			private function setupContext():void {
				context = new Context().install(MVCSBundle, SignalCommandMapExtension).configure(AppConfig)
					
					.configure(MainConfig).configure(ChatConfig).configure(UserConfig).configure(VideoConfig).configure(MainToolbarConfig).configure(CameraDisplaySettingsConfig).configure(ToolbarPopupButtonConfig).configure(ToolbarButtonConfig).configure(AudioSelectionWindowConfig).configure(ShortcutHelpConfig).configure(PresentationConfig).configure(WhiteboardConfig).configure(DeskshareConfig)
					
					.configure(new ContextView(this));
				
				// If you wish to change the log level then uncomment the line below and set 
				// the logLevel to the value you desire. The default logLevel is DEBUG, which 
				// is set in the MVCSBundle. The default log level traces out the framework 
				// actions, which can assist in learning Robotlegs.
				setLogLevel();
			}
			
			private function handleShareCameraRequestEvent():void {
				if (ExternalInterface.call("determineBrowser")[0] == "Chrome" && chromeBrowser == null) {
					chromeBrowser = PopUpManager.createPopUp(mainCanvas, ChromeWebcamPermissionImage, true) as ChromeWebcamPermissionImage;
					chromeBrowser.addEventListener(FlexEvent.CREATION_COMPLETE, function(e:Event):void {
						var point1:Point = new Point();
						// Calculate position of TitleWindow in Application's coordinates.
						point1.x = width / 2;
						point1.y = height / 2;
						if (Capabilities.os.indexOf("Mac") >= 0) {
							chromeBrowser.x = (mainCanvas.width - chromeBrowser.width);
						} else {
							chromeBrowser.x = 20;
						}
						chromeBrowser.y = 20;
					});
				}
			}
			
			/**
			 * Sets the logLevel for the robotegs context.
			 */
			private function setLogLevel():void {
				// setting the logLevel to WARN means that robotlegs
				// will also notify us about ERROR & FATAL.
				context.logLevel = LogLevel.WARN;
			}
			
			private function creationCompleteHandler(event:FlexEvent):void {
				mainCanvas.windowManager.add(new ChatWindow());
				mainCanvas.windowManager.add(new UserWindow());
				mainCanvas.windowManager.add(new VideoWindow());
				mainCanvas.windowManager.add(new PresentationWindow());
				mainCanvas.windowManager.add(new DeskshareWindow());
			}
			
			private function onFooterLinkClicked(e:TextEvent):void {
				trace("Clicked on link[" + e.text + "] from footer");
				if (ExternalInterface.available) {
					ExternalInterface.call("chatLinkClicked", e.text);
				}
			}
		]]>
	</fx:Script>

	<s:Group id="mainshell"
			 width="100%"
			 height="100%">
		<s:layout>
			<s:VerticalLayout gap="0" />
		</s:layout>

		<toolbar:MainToolbarView id="toolbar"
								 dock="true"
								 width="100%"
								 height="{toolbarHeight}"
								 visible="{showToolbarOpt}"
								 verticalAlign="middle"
								 paddingTop="{toolbarPaddingTop}" />

		<!-- <cameradisplaysettings:CameraDisplaySettings /> -->

		<window:BBBCanvas id="mainCanvas"
						  width="100%"
						  height="100%">
			<!--<window:BBBWindow id="testWindow" title="Test Window" />-->
		</window:BBBCanvas>

		<mx:ControlBar width="100%"
					   height="{footerHeight}"
					   id="controlBar"
					   paddingTop="2"
					   paddingBottom="2"
					   verticalAlign="middle"
					   visible="{_showFooter}"
					   includeInLayout="{showFooterOpt}">
			<mx:Label htmlText="{copyrightText}"
					  link="onFooterLinkClicked(event)"
					  id="copyrightLabel2"
					  truncateToFit="true"
					  selectable="true"
					  paddingRight="10" />
			<mx:Spacer width="100%"
					   id="spacer" />
			<mx:Label id="lblWebRTC"
					  text="[ WebRTC Audio ]"
					  visible="false"
					  includeInLayout="false" />
			<mx:Label text="[Tunnelling]"
					  id="isTunnellingLbl"
					  visible="{isTunneling}"
					  includeInLayout="{isTunneling}" />
			<!--	<views:WarningButton id="warningBtn"
									 width="23"
									 height="20" /> -->
			<languageselector:LanguageSelector id="langSelector"
											   height="20"
											   width="180"
											   accessibilityName="{ResourceUtil.getInstance().getString('bbb.mainToolbar.langSelector')}"
											   styleName="languageSelectorStyle"
											   tabIndex="{baseIndex}" />
			<!--	<mx:Button width="20"
						   height="20"
						   visible="{layoutOptions.showLogButton}"
						   includeInLayout="{layoutOptions.showLogButton}"
						   toolTip="Open Log Window"
						   id="logBtn"
						   icon="{logs_icon}"
						   click="openLogWindow()"
						   tabIndex="{baseIndex+1}" />
				<mx:HBox id="addedBtns" />
				<mx:Button width="20"
						   height="20"
						   toolTip="Toggle full screen"
						   id="fullScreen"
						   icon="{fullscreen_icon}"
						   click="toggleFullScreen()" /> -->
		</mx:ControlBar>

	</s:Group>

	<main:LoadingScreen />
</s:Application>
